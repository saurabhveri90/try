Java Code for Calling an API in AEM
Create an OSGi Service that calls an API and logs the response.

1. OSGi Service Interface
Create a service interface to define the API call function.

java
Copy
Edit
package com.example.core.services;

public interface ApiService {
    String callApi();
}
2. OSGi Service Implementation
Implement the API call logic in an OSGi service.

java
Copy
Edit
package com.example.core.services.impl;

import com.example.core.services.ApiService;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.ServiceScope;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Deactivate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

@Component(service = ApiService.class, immediate = true, scope = ServiceScope.SINGLETON)
public class ApiServiceImpl implements ApiService {

    private static final Logger LOG = LoggerFactory.getLogger(ApiServiceImpl.class);

    @Override
    public String callApi() {
        String apiUrl = "https://jsonplaceholder.typicode.com/posts/1"; // Example API
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(apiUrl);
            request.addHeader("Accept", "application/json"); // Optional headers

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                int statusCode = response.getStatusLine().getStatusCode();
                HttpEntity entity = response.getEntity();
                InputStream contentStream = entity.getContent();
                String responseBody = IOUtils.toString(contentStream, StandardCharsets.UTF_8);

                if (statusCode == 200) {
                    LOG.info("API Response: {}", responseBody);
                    return responseBody;
                } else {
                    LOG.error("API Error - Status Code: {}, Response: {}", statusCode, responseBody);
                    return "Error: " + statusCode;
                }
            }
        } catch (Exception e) {
            LOG.error("Exception while calling API", e);
            return "Exception: " + e.getMessage();
        }
    }

    @Activate
    protected void activate() {
        LOG.info("API Service Activated");
    }

    @Deactivate
    protected void deactivate() {
        LOG.info("API Service Deactivated");
    }
}
3. How to Use the Service in an AEM Servlet
You can call this service from an AEM Sling Servlet.

java
Copy
Edit
package com.example.core.servlets;

import com.example.core.services.ApiService;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import javax.servlet.Servlet;
import java.io.IOException;

@Component(
    service = Servlet.class,
    property = {
        "sling.servlet.paths=/bin/api-test",
        "sling.servlet.methods=GET"
    }
)
public class ApiServlet extends SlingAllMethodsServlet {

    @Reference
    private ApiService apiService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        String apiResponse = apiService.callApi();
        response.setContentType("application/json");
        response.getWriter().write(apiResponse);
    }
}
4. Testing the API in AEM
Deploy the code and restart AEM.
Open your browser and go to:
bash
Copy
Edit
http://localhost:4502/bin/api-test
Check AEM Logs (error.log) to see API responses or errors.
